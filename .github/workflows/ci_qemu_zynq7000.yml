name: CI Tests Zynq7000 Qemu
on:
  workflow_dispatch:
  workflow_call:

permissions:
  contents: read

concurrency:
  group: ci-zynq7000-qemu
  #cancel-in-progress: true # Do we want this? this would cause current tests to be stopped if a new ci request is launched.
  # Waiting till the current run is done is probably the better solution

env:
  PLAT: "zynq7000"
  BUILD_CMD: 'trentos/sdk/scripts/open_trentos_build_env.sh -d "--userns=keep-id -e CCACHE_DISABLE=1 -e STACK_ROOT=/host/trentos/.stack -e BUILD_PLATFORM=zynq7000" trentos/build.sh'

jobs:
  #check_label:
  #  runs-on: ubuntu-latest
  #  steps:
  #    - name: Check if label is applied
  #      id: label-check
  #      run: |
  #        if [[ $(jq -r '.action' "$GITHUB_EVENT_PATH") == "labeled" && $(jq -r '.label.name' "$GITHUB_EVENT_PATH") == "Run-CI" ]]; then
  #          echo "Label 'Run-CI' applied. Running workflow steps."
  #        else
  #          echo "Label 'Run-CI' not applied. Exiting workflow without running steps."
  #          exit 78  # Exit with a neutral status to mark the check as pending
  #        fi


  # THIS IS A DUMMY DO NOT USE IN PRODUCTION!!!
  check_label:
    runs-on: ubuntu-latest
    outputs:
        PLAT: ${{ env.PLAT }}
    steps:
      - name: Dummy
        id: label-check
        run: echo "dummy"

  demos_and_tests:
    #
    # A Matrix job is not used as this would require an individual checkout of trentos for each test, which each takes at least 4 minutes.
    # To speed the test process up and not waste resources, a checkout is only performed once per platform. As each test is in its own container anyway, this is not a problem.
    #
    name: ${{ needs.check_label.outputs.TEST_PLAT }} Tests & Demos
    needs: check_label
    runs-on: self-hosted
    steps:
      # preparation
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.ORG_CLONE_PRV_SUBM }}
          submodules: 'recursive'
          path: 'trentos'
      - name: Test prepare
        # podman is compatible with docker.... so I was told
        # we need --userns=keep-id to keep the user id as fixuid does not work with podman
        # custom command for now, podman compatibility for build.sh might be added later
        run: docker run -t --rm --hostname hensoldtcyber-trentos-build-latest --userns=keep-id -u $UID:$UID -v /etc/localtime:/etc/localtime:ro -v /home/actions-service-user/actions-runner/_work/trentos/trentos:/host -w /host --name hensoldtcyber-trentos-build-latest --group-add=stack hensoldtcyber/trentos_build:latest trentos/build.sh test-prepare
        working-directory: ${{ github.workspace }}

      # demo_hello_world
      - name: Build ${{ env.TEST_CONFIGURATION }}
        if: always()
        env:
          TEST_CONFIGURATION: "demo_hello_world"
        run: ${{ env.BUILD_CMD }} ${{ env.TEST_CONFIGURATION }}
        working-directory: ${{ github.workspace }}

      - name: Run ${{ env.TEST_CONFIGURATION }}
        if: always()
        env:
          TEST_CONFIGURATION: "demo_hello_world"
        run: |
          ${{ env.BUILD_CMD }} test-run test_${{ env.TEST_CONFIGURATION }}.py
        working-directory: ${{ github.workspace }}

      # test_certparser
      - name: Build ${{ env.TEST_CONFIGURATION }}
        if: always()
        env:
          TEST_CONFIGURATION: "test_certparser"
        run: |
          trentos/sdk/scripts/open_trentos_build_env.sh -d "--userns=keep-id -e CCACHE_DISABLE=1 -e STACK_ROOT=/host/trentos/.stack -e BUILD_PLATFORM=${{ needs.check_label.outputs.TEST_PLAT }}" trentos/build.sh ${{ env.TEST_CONFIGURATION }}
        working-directory: ${{ github.workspace }}

      - name: Run ${{ env.TEST_CONFIGURATION }}
        if: always()
        env:
          TEST_CONFIGURATION: "test_certparser"
        run: |
          trentos/sdk/scripts/open_trentos_test_env.sh -d "--userns=keep-id -e CCACHE_DISABLE=1 -e STACK_ROOT=/host/trentos/.stack -e BUILD_PLATFORM=${{ needs.check_label.outputs.TEST_PLAT }}" trentos/build.sh test-run ${{ env.TEST_CONFIGURATION }}.py
        working-directory: ${{ github.workspace }}

      # test_certserver
      - name: Build ${{ env.TEST_CONFIGURATION }}
        if: always()
        env:
          TEST_CONFIGURATION: "test_certserver"
        run: |
          trentos/sdk/scripts/open_trentos_build_env.sh -d "--userns=keep-id -e CCACHE_DISABLE=1 -e STACK_ROOT=/host/trentos/.stack -e BUILD_PLATFORM=${{ needs.check_label.outputs.TEST_PLAT }}" trentos/build.sh ${{ env.TEST_CONFIGURATION }}
        working-directory: ${{ github.workspace }}
        
      - name: Run ${{ env.TEST_CONFIGURATION }}
        if: always()
        env:
          TEST_CONFIGURATION: "test_certserver"
        run: |
          trentos/sdk/scripts/open_trentos_test_env.sh -d "--userns=keep-id -e CCACHE_DISABLE=1 -e STACK_ROOT=/host/trentos/.stack -e BUILD_PLATFORM=${{ needs.check_label.outputs.TEST_PLAT }}" trentos/build.sh test-run ${{ env.TEST_CONFIGURATION }}.py
        working-directory: ${{ github.workspace }}

      # test_config_server
      - name: Build ${{ env.TEST_CONFIGURATION }}
        if: always()
        env:
          TEST_CONFIGURATION: "test_config_server"
        run: |
          trentos/sdk/scripts/open_trentos_build_env.sh -d "--userns=keep-id -e CCACHE_DISABLE=1 -e STACK_ROOT=/host/trentos/.stack -e BUILD_PLATFORM=${{ needs.check_label.outputs.TEST_PLAT }}" trentos/build.sh ${{ env.TEST_CONFIGURATION }}
        working-directory: ${{ github.workspace }}

      - name: Run ${{ env.TEST_CONFIGURATION }}
        if: always()
        env:
          TEST_CONFIGURATION: "test_config_server"
        run: |
          trentos/sdk/scripts/open_trentos_test_env.sh -d "--userns=keep-id -e CCACHE_DISABLE=1 -e STACK_ROOT=/host/trentos/.stack -e BUILD_PLATFORM=${{ needs.check_label.outputs.TEST_PLAT }}" trentos/build.sh test-run ${{ env.TEST_CONFIGURATION }}.py
        working-directory: ${{ github.workspace }}

      # test_crypto_api
      - name: Build ${{ env.TEST_CONFIGURATION }}
        if: always()
        env:
          TEST_CONFIGURATION: "test_crypto_api"
        run: |
          trentos/sdk/scripts/open_trentos_build_env.sh -d "--userns=keep-id -e CCACHE_DISABLE=1 -e STACK_ROOT=/host/trentos/.stack -e BUILD_PLATFORM=${{ needs.check_label.outputs.TEST_PLAT }}" trentos/build.sh ${{ env.TEST_CONFIGURATION }}
        working-directory: ${{ github.workspace }}

      - name: Run ${{ env.TEST_CONFIGURATION }}
        if: always()
        env:
          TEST_CONFIGURATION: "test_crypto_api"
        run: |
          trentos/sdk/scripts/open_trentos_test_env.sh -d "--userns=keep-id -e CCACHE_DISABLE=1 -e STACK_ROOT=/host/trentos/.stack -e BUILD_PLATFORM=${{ needs.check_label.outputs.TEST_PLAT }}" trentos/build.sh test-run ${{ env.TEST_CONFIGURATION }}.py
        working-directory: ${{ github.workspace }}

      # test_cryptoserver
      - name: Build ${{ env.TEST_CONFIGURATION }}
        if: always()
        env:
          TEST_CONFIGURATION: "test_cryptoserver"
        run: |
          trentos/sdk/scripts/open_trentos_build_env.sh -d "--userns=keep-id -e CCACHE_DISABLE=1 -e STACK_ROOT=/host/trentos/.stack -e BUILD_PLATFORM=${{ needs.check_label.outputs.TEST_PLAT }}" trentos/build.sh ${{ env.TEST_CONFIGURATION }}
        working-directory: ${{ github.workspace }}

      - name: Run ${{ env.TEST_CONFIGURATION }}
        if: always()
        env:
          TEST_CONFIGURATION: "test_cryptoserver"
        run: |
          trentos/sdk/scripts/open_trentos_test_env.sh -d "--userns=keep-id -e CCACHE_DISABLE=1 -e STACK_ROOT=/host/trentos/.stack -e BUILD_PLATFORM=${{ needs.check_label.outputs.TEST_PLAT }}" trentos/build.sh test-run ${{ env.TEST_CONFIGURATION }}.py
        working-directory: ${{ github.workspace }}

      # test_entropysource
      - name: Build ${{ env.TEST_CONFIGURATION }}
        if: always()
        env:
          TEST_CONFIGURATION: "test_entropysource"
        run: |
          trentos/sdk/scripts/open_trentos_build_env.sh -d "--userns=keep-id -e CCACHE_DISABLE=1 -e STACK_ROOT=/host/trentos/.stack -e BUILD_PLATFORM=${{ needs.check_label.outputs.TEST_PLAT }}" trentos/build.sh ${{ env.TEST_CONFIGURATION }}
        working-directory: ${{ github.workspace }}
      - name: Run ${{ env.TEST_CONFIGURATION }}
        if: always()
        env:
          TEST_CONFIGURATION: "test_entropysource"
        run: |
          trentos/sdk/scripts/open_trentos_test_env.sh -d "--userns=keep-id -e CCACHE_DISABLE=1 -e STACK_ROOT=/host/trentos/.stack -e BUILD_PLATFORM=${{ needs.check_label.outputs.TEST_PLAT }}" trentos/build.sh test-run ${{ env.TEST_CONFIGURATION }}.py
        working-directory: ${{ github.workspace }}


      # test_filesystem
      - name: Build ${{ env.TEST_CONFIGURATION }}
        if: always()
        env:
          TEST_CONFIGURATION: "test_filesystem"
        run: |
          trentos/sdk/scripts/open_trentos_build_env.sh -d "--userns=keep-id -e CCACHE_DISABLE=1 -e STACK_ROOT=/host/trentos/.stack -e BUILD_PLATFORM=${{ needs.check_label.outputs.TEST_PLAT }}" trentos/build.sh ${{ env.TEST_CONFIGURATION }}
        working-directory: ${{ github.workspace }}

      - name: Run ${{ env.TEST_CONFIGURATION }}
        if: always()
        env:
          TEST_CONFIGURATION: "test_filesystem"
        run: |
          trentos/sdk/scripts/open_trentos_test_env.sh -d "--userns=keep-id -e CCACHE_DISABLE=1 -e STACK_ROOT=/host/trentos/.stack -e BUILD_PLATFORM=${{ needs.check_label.outputs.TEST_PLAT }}" trentos/build.sh test-run ${{ env.TEST_CONFIGURATION }}.py
        working-directory: ${{ github.workspace }}


      # test_keystore
      - name: Build ${{ env.TEST_CONFIGURATION }}
        if: always()
        env:
          TEST_CONFIGURATION: "test_keystore"
        run: |
          trentos/sdk/scripts/open_trentos_build_env.sh -d "--userns=keep-id -e CCACHE_DISABLE=1 -e STACK_ROOT=/host/trentos/.stack -e BUILD_PLATFORM=${{ needs.check_label.outputs.TEST_PLAT }}" trentos/build.sh ${{ env.TEST_CONFIGURATION }}
        working-directory: ${{ github.workspace }}

      - name: Run ${{ env.TEST_CONFIGURATION }}
        if: always()
        env:
          TEST_CONFIGURATION: "test_keystore"
        run: |
          trentos/sdk/scripts/open_trentos_test_env.sh -d "--userns=keep-id -e CCACHE_DISABLE=1 -e STACK_ROOT=/host/trentos/.stack -e BUILD_PLATFORM=${{ needs.check_label.outputs.TEST_PLAT }}" trentos/build.sh test-run ${{ env.TEST_CONFIGURATION }}.py
        working-directory: ${{ github.workspace }}


      # test_logserver
      - name: Build ${{ env.TEST_CONFIGURATION }}
        if: always()
        env:
          TEST_CONFIGURATION: "test_logserver"
        run: |
          trentos/sdk/scripts/open_trentos_build_env.sh -d "--userns=keep-id -e CCACHE_DISABLE=1 -e STACK_ROOT=/host/trentos/.stack -e BUILD_PLATFORM=${{ needs.check_label.outputs.TEST_PLAT }}" trentos/build.sh ${{ env.TEST_CONFIGURATION }}
        working-directory: ${{ github.workspace }}

      - name: Run ${{ env.TEST_CONFIGURATION }}
        if: always()
        env:
          TEST_CONFIGURATION: "test_logserver"
        run: |
          trentos/sdk/scripts/open_trentos_test_env.sh -d "--userns=keep-id -e CCACHE_DISABLE=1 -e STACK_ROOT=/host/trentos/.stack -e BUILD_PLATFORM=${{ needs.check_label.outputs.TEST_PLAT }}" trentos/build.sh test-run ${{ env.TEST_CONFIGURATION }}.py
        working-directory: ${{ github.workspace }}
      

      # test_proxy_nvm
      - name: Build ${{ env.TEST_CONFIGURATION }}
        if: always()
        env:
          TEST_CONFIGURATION: "test_proxy_nvm"
        run: |
          trentos/sdk/scripts/open_trentos_build_env.sh -d "--userns=keep-id -e CCACHE_DISABLE=1 -e STACK_ROOT=/host/trentos/.stack -e BUILD_PLATFORM=${{ needs.check_label.outputs.TEST_PLAT }}" trentos/build.sh ${{ env.TEST_CONFIGURATION }}
        working-directory: ${{ github.workspace }}

      - name: Run ${{ env.TEST_CONFIGURATION }}
        if: always()
        env:
          TEST_CONFIGURATION: "test_proxy_nvm"
        run: |
          trentos/sdk/scripts/open_trentos_test_env.sh -d "--userns=keep-id -e CCACHE_DISABLE=1 -e STACK_ROOT=/host/trentos/.stack -e BUILD_PLATFORM=${{ needs.check_label.outputs.TEST_PLAT }}" trentos/build.sh test-run ${{ env.TEST_CONFIGURATION }}.py
        working-directory: ${{ github.workspace }}

      # test_storage_interface
      - name: Build ${{ env.TEST_CONFIGURATION }}
        if: always()
        env:
          TEST_CONFIGURATION: "test_storage_interface"
        run: |
          trentos/sdk/scripts/open_trentos_build_env.sh -d "--userns=keep-id -e CCACHE_DISABLE=1 -e STACK_ROOT=/host/trentos/.stack -e BUILD_PLATFORM=${{ needs.check_label.outputs.TEST_PLAT }}" trentos/build.sh ${{ env.TEST_CONFIGURATION }}
        working-directory: ${{ github.workspace }}

      - name: Run ${{ env.TEST_CONFIGURATION }}
        if: always()
        env:
          TEST_CONFIGURATION: "test_storage_interface"
        run: |
          trentos/sdk/scripts/open_trentos_test_env.sh -d "--userns=keep-id -e CCACHE_DISABLE=1 -e STACK_ROOT=/host/trentos/.stack -e BUILD_PLATFORM=${{ needs.check_label.outputs.TEST_PLAT }}" trentos/build.sh test-run ${{ env.TEST_CONFIGURATION }}.py
        working-directory: ${{ github.workspace }}

      # test_timeserver
      - name: Build ${{ env.TEST_CONFIGURATION }}
        if: always()
        env:
          TEST_CONFIGURATION: "test_timeserver"
        run: |
          trentos/sdk/scripts/open_trentos_build_env.sh -d "--userns=keep-id -e CCACHE_DISABLE=1 -e STACK_ROOT=/host/trentos/.stack -e BUILD_PLATFORM=${{ needs.check_label.outputs.TEST_PLAT }}" trentos/build.sh ${{ env.TEST_CONFIGURATION }}
        working-directory: ${{ github.workspace }}

      - name: Run ${{ env.TEST_CONFIGURATION }}
        if: always()
        env:
          TEST_CONFIGURATION: "test_timeserver"
        run: |
          trentos/sdk/scripts/open_trentos_test_env.sh -d "--userns=keep-id -e CCACHE_DISABLE=1 -e STACK_ROOT=/host/trentos/.stack -e BUILD_PLATFORM=${{ needs.check_label.outputs.TEST_PLAT }}" trentos/build.sh test-run ${{ env.TEST_CONFIGURATION }}.py
        working-directory: ${{ github.workspace }}


      # test_tls_api
      - name: Build ${{ env.TEST_CONFIGURATION }}
        if: always()
        env:
          TEST_CONFIGURATION: "test_tls_api"
        run: |
          trentos/sdk/scripts/open_trentos_build_env.sh -d "--userns=keep-id -e CCACHE_DISABLE=1 -e STACK_ROOT=/host/trentos/.stack -e BUILD_PLATFORM=${{ needs.check_label.outputs.TEST_PLAT }}" trentos/build.sh ${{ env.TEST_CONFIGURATION }}
        working-directory: ${{ github.workspace }}

      - name: Run ${{ env.TEST_CONFIGURATION }}
        if: always()
        env:
          TEST_CONFIGURATION: "test_tls_api"
        run: |
          trentos/sdk/scripts/open_trentos_test_env.sh -d "--userns=keep-id -e CCACHE_DISABLE=1 -e STACK_ROOT=/host/trentos/.stack -e BUILD_PLATFORM=${{ needs.check_label.outputs.TEST_PLAT }}" trentos/build.sh test-run ${{ env.TEST_CONFIGURATION }}.py
        working-directory: ${{ github.workspace }}


      # test_tlsserver
      - name: Build ${{ env.TEST_CONFIGURATION }}
        if: always()
        env:
          TEST_CONFIGURATION: "test_tlsserver"
        run: |
          trentos/sdk/scripts/open_trentos_build_env.sh -d "--userns=keep-id -e CCACHE_DISABLE=1 -e STACK_ROOT=/host/trentos/.stack -e BUILD_PLATFORM=${{ needs.check_label.outputs.TEST_PLAT }}" trentos/build.sh ${{ env.TEST_CONFIGURATION }}
        working-directory: ${{ github.workspace }}

      - name: Run ${{ env.TEST_CONFIGURATION }}
        if: always()
        env:
          TEST_CONFIGURATION: "test_tlsserver"
        run: |
          trentos/sdk/scripts/open_trentos_test_env.sh -d "--userns=keep-id -e CCACHE_DISABLE=1 -e STACK_ROOT=/host/trentos/.stack -e BUILD_PLATFORM=${{ needs.check_label.outputs.TEST_PLAT }}" trentos/build.sh test-run ${{ env.TEST_CONFIGURATION }}.py
        working-directory: ${{ github.workspace }}


      # test_uart
      - name: Build ${{ env.TEST_CONFIGURATION }}
        if: always()
        env:
          TEST_CONFIGURATION: "test_uart"
        run: |
          trentos/sdk/scripts/open_trentos_build_env.sh -d "--userns=keep-id -e CCACHE_DISABLE=1 -e STACK_ROOT=/host/trentos/.stack -e BUILD_PLATFORM=${{ needs.check_label.outputs.TEST_PLAT }}" trentos/build.sh ${{ env.TEST_CONFIGURATION }}
        working-directory: ${{ github.workspace }}

      - name: Run ${{ env.TEST_CONFIGURATION }}
        if: always()
        env:
          TEST_CONFIGURATION: "test_uart"
        run: |
          trentos/sdk/scripts/open_trentos_test_env.sh -d "--userns=keep-id -e CCACHE_DISABLE=1 -e STACK_ROOT=/host/trentos/.stack -e BUILD_PLATFORM=${{ needs.check_label.outputs.TEST_PLAT }}" trentos/build.sh test-run ${{ env.TEST_CONFIGURATION }}.py
        working-directory: ${{ github.workspace }}

      
      # test_network_api - tcp_server
      - name: Build ${{ env.TEST_CONFIGURATION }}
        if: always()
        env:
          TEST_CONFIGURATION: "tcp_server"
        run: |
         trentos/sdk/scripts/open_trentos_build_env.sh -d "--userns=keep-id -e CCACHE_DISABLE=1 -e STACK_ROOT=/host/trentos/.stack -e BUILD_PLATFORM=${{ needs.check_label.outputs.TEST_PLAT }}" trentos/build.sh test_network_api -Denv.TEST_CONFIGURATION=${{ env.TEST_CONFIGURATION }}
        working-directory: ${{ github.workspace }}

      - name: Run ${{ env.TEST_CONFIGURATION }}
        if: always()
        env:
          TEST_CONFIGURATION: "tcp_server"
        run: |
         trentos/sdk/scripts/open_trentos_test_env.sh -d "--userns=keep-id -e CCACHE_DISABLE=1 -e STACK_ROOT=/host/trentos/.stack -e BUILD_PLATFORM=${{ needs.check_label.outputs.TEST_PLAT }}" trentos/build.sh test-run test_network_api.py --tc=platform.env.TEST_CONFIGURATION:${{ env.TEST_CONFIGURATION }}
        working-directory: ${{ github.workspace }}

 
      # test_network_api - tcp_client_single_socket
      - name: Build ${{ env.TEST_CONFIGURATION }}
        if: always()
        env:
          TEST_CONFIGURATION: "tcp_client_single_socket"
        run: |
         trentos/sdk/scripts/open_trentos_build_env.sh -d "--userns=keep-id -e CCACHE_DISABLE=1 -e STACK_ROOT=/host/trentos/.stack -e BUILD_PLATFORM=${{ needs.check_label.outputs.TEST_PLAT }}" trentos/build.sh test_network_api -Denv.TEST_CONFIGURATION=${{ env.TEST_CONFIGURATION }}
        working-directory: ${{ github.workspace }}

      - name: Run ${{ env.TEST_CONFIGURATION }}
        if: always()
        env:
          TEST_CONFIGURATION: "tcp_client_single_socket"
        run: |
         trentos/sdk/scripts/open_trentos_test_env.sh -d "--userns=keep-id -e CCACHE_DISABLE=1 -e STACK_ROOT=/host/trentos/.stack -e BUILD_PLATFORM=${{ needs.check_label.outputs.TEST_PLAT }}" trentos/build.sh test-run test_network_api.py --tc=platform.env.TEST_CONFIGURATION:${{ env.TEST_CONFIGURATION }}
        working-directory: ${{ github.workspace }}


      # test_network_api - tcp_client_multiple_sockets
      - name: Build ${{ env.TEST_CONFIGURATION }}
        if: always()
        env:
          TEST_CONFIGURATION: "tcp_client_multiple_sockets"
        run: |
         trentos/sdk/scripts/open_trentos_build_env.sh -d "--userns=keep-id -e CCACHE_DISABLE=1 -e STACK_ROOT=/host/trentos/.stack -e BUILD_PLATFORM=${{ needs.check_label.outputs.TEST_PLAT }}" trentos/build.sh test_network_api -Denv.TEST_CONFIGURATION=${{ env.TEST_CONFIGURATION }}
        working-directory: ${{ github.workspace }}

      - name: Run ${{ env.TEST_CONFIGURATION }}
        if: always()
        env:
          TEST_CONFIGURATION: "tcp_client_multiple_sockets"
        run: |
         trentos/sdk/scripts/open_trentos_test_env.sh -d "--userns=keep-id -e CCACHE_DISABLE=1 -e STACK_ROOT=/host/trentos/.stack -e BUILD_PLATFORM=${{ needs.check_label.outputs.TEST_PLAT }}" trentos/build.sh test-run test_network_api.py --tc=platform.env.TEST_CONFIGURATION:${{ env.TEST_CONFIGURATION }}
        working-directory: ${{ github.workspace }}


      # test_network_api - udp_server
      - name: Build ${{ env.TEST_CONFIGURATION }}
        if: always()
        env:
          TEST_CONFIGURATION: "udp_server"
        run: |
         trentos/sdk/scripts/open_trentos_build_env.sh -d "--userns=keep-id -e CCACHE_DISABLE=1 -e STACK_ROOT=/host/trentos/.stack -e BUILD_PLATFORM=${{ needs.check_label.outputs.TEST_PLAT }}" trentos/build.sh test_network_api -Denv.TEST_CONFIGURATION=${{ env.TEST_CONFIGURATION }}
        working-directory: ${{ github.workspace }}

      - name: Run ${{ env.TEST_CONFIGURATION }}
        if: always()
        env:
          TEST_CONFIGURATION: "udp_server"
        run: |
         trentos/sdk/scripts/open_trentos_test_env.sh -d "--userns=keep-id -e CCACHE_DISABLE=1 -e STACK_ROOT=/host/trentos/.stack -e BUILD_PLATFORM=${{ needs.check_label.outputs.TEST_PLAT }}" trentos/build.sh test-run test_network_api.py --tc=platform.env.TEST_CONFIGURATION:${{ env.TEST_CONFIGURATION }}
        working-directory: ${{ github.workspace }}
