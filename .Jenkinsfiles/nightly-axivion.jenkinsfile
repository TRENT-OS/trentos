//------------------------------------------------------------------------------
def DOCKER_BASE = 'docker:5000'
def DOCKER_REGISTRY = 'https://' + DOCKER_BASE
def DOCKER_ANALYSIS_ENV  = [
    registry: DOCKER_REGISTRY,
    image: DOCKER_BASE + '/trentos_analysis:20220112',
    args: [
        // NOTE: The following docker arguments are required for running in CI.
        // This is a subset of the arguments used for starting the container
        // locally with 'open_trentos_analysis_env.sh'.

        // bind localtime to docker container
        '-v /etc/localtime:/etc/localtime:ro',

        // add user to group stack (for the haskell tools)
        '--group-add=stack',

        // set permissions to use SSHFS
        '--cap-add SYS_ADMIN',
        '--device /dev/fuse',
        '--security-opt apparmor:unconfined',
    ].join(' ')
]

//------------------------------------------------------------------------------
def print_step_info(name) {
    echo "#################### " + name
}

//------------------------------------------------------------------------------
def wait_for_fixuid() {
    sh('''
        until [ -f /run/fixuid.ran ]
        do
            echo "Waiting for fixuid to finish."
            sleep 1
        done

        export HOME=/home/user
    ''')
}

//------------------------------------------------------------------------------
pipeline {

    agent none

    stages {

        //----------------------------------------------------------------------
        stage('Axivion Suite Analysis') {

            agent { label "build" }

            stages {

                //--------------------------------------------------------------
                stage('checkout') {
                    steps {
                        print_step_info(env.STAGE_NAME)

                        cleanWs()

                        dir('seos_tests') {
                            print_step_info("checkout seos_tests")

                            checkout([
                                $class: 'GitSCM',
                                branches: scm.branches,
                                doGenerateSubmoduleConfigurations: false,
                                extensions: [
                                    [
                                        $class: 'SubmoduleOption',
                                        disableSubmodules: false,
                                        recursiveSubmodules: true,
                                        trackingSubmodules: false,
                                        parentCredentials: true
                                    ]
                                ],
                                userRemoteConfigs: [
                                    [
                                        credentialsId: scm.userRemoteConfigs[0].credentialsId,
                                        url: scm.userRemoteConfigs[0].url
                                    ]
                                ]
                            ])
                        }
                    }
                }

                //--------------------------------------------------------------
                stage('analyse libs') {
                    agent {
                        docker {
                            reuseNode true
                            alwaysPull true
                            registryUrl DOCKER_ANALYSIS_ENV.registry
                            image DOCKER_ANALYSIS_ENV.image
                            args DOCKER_ANALYSIS_ENV.args
                        }
                    }
                    steps {
                        print_step_info(env.STAGE_NAME)

                        wait_for_fixuid()

                        dir('seos_tests') {
                            sh('''#!/bin/bash
                                source $HOME/.bashrc

                                export ENABLE_CI_BUILD=ON
                                seos_sandbox/scripts/axivion/start_analysis.sh seos_sandbox/libs/test/analysis/axivion
                            ''')
                        }
                    }
                }

                //--------------------------------------------------------------
                stage('analyse demo hello world') {
                    agent {
                        docker {
                            reuseNode true
                            alwaysPull true
                            registryUrl DOCKER_ANALYSIS_ENV.registry
                            image DOCKER_ANALYSIS_ENV.image
                            args DOCKER_ANALYSIS_ENV.args
                        }
                    }
                    steps {
                        print_step_info(env.STAGE_NAME)

                        wait_for_fixuid()

                        dir('seos_tests') {
                            sh('''#!/bin/bash
                                source $HOME/.bashrc

                                export ENABLE_CI_BUILD=ON
                                seos_sandbox/scripts/axivion/start_analysis.sh src/demos/demo_hello_world/axivion
                            ''')
                        }
                    }
                }

                //--------------------------------------------------------------
                stage('analyse demo network filter') {
                    agent {
                        docker {
                            reuseNode true
                            alwaysPull true
                            registryUrl DOCKER_ANALYSIS_ENV.registry
                            image DOCKER_ANALYSIS_ENV.image
                            args DOCKER_ANALYSIS_ENV.args
                        }
                    }
                    steps {
                        print_step_info(env.STAGE_NAME)

                        wait_for_fixuid()

                        dir('seos_tests') {
                            sh('''#!/bin/bash
                                source $HOME/.bashrc

                                export ENABLE_CI_BUILD=ON
                                seos_sandbox/scripts/axivion/start_analysis.sh src/demos/demo_network_filter/axivion
                            ''')
                        }
                    }
                }

                //--------------------------------------------------------------
                stage('cleanup') {
                    steps{
                        print_step_info(env.STAGE_NAME)

                        cleanWs()
                    }
                }

            }
        }
    }
}
