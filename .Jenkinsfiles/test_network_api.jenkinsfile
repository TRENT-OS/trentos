def TEST_SYSTEM = 'test_network_api'
def BUILD_SPEC  = 'build-zynq7000-Debug-' + TEST_SYSTEM

// bind the localtime to docker container to avoid problems of gaps between the
// localtime of the container and the host.
// add to group "stack" in order to grant usage of Haskell stack in the docker
// image

def DOCKER_BUILD_ENV = [ image: 'docker:5000/seos_build_env:latest',
                         args: ' -v /etc/localtime:/etc/localtime:ro '+
                               ' --group-add=1001',
                         registry: 'http://docker:5000'
                       ]

def DOCKER_TEST_ENV  = [ image: 'docker:5000/seos_test_env:latest',
                         args:  ' -v /home/jenkins/.ssh/:/home/jenkins/.ssh:ro'+
                                ' -v /etc/localtime:/etc/localtime:ro' +
                                ' --network=host' +
                                ' --cap-add=NET_ADMIN' +
                                ' --cap-add=NET_RAW' +
                                ' --device=/dev/net/tun',
                         registry: 'http://docker:5000'
                       ]

pipeline {
    agent {
        label 'jenkins_secondary_slave'
    }
    options {
        skipDefaultCheckout true
    }
    stages {
        stage('clean_checkout') {
            steps {
                echo '######################################### Clean Checkout #########################################'
                cleanWs()
                // everything is in separate folders to avoid file conflicts. Sources are checked out into
                // "scm-src", builds should generate "build-xxx" folders, tests will use "workspace_test" ...
                dir('scm-src') {
                    checkout scm
                }
            }
        }
        stage('docker_update') {
            steps {
                echo '######################################### Checkout #########################################'
                // everything is in separate folders to avoid file conflicts. Sources are checked out into
                // "scm-src", builds should generate "build-xxx" folders, tests will use "workspace_test" ...
                sh 'docker pull ' + DOCKER_TEST_ENV.image
                sh 'docker pull ' + DOCKER_BUILD_ENV.image
            }
        }
        stage('build') {
            agent {
                docker {
                    reuseNode true
                    registryUrl DOCKER_BUILD_ENV.registry
                    image DOCKER_BUILD_ENV.image
                    args DOCKER_BUILD_ENV.args
                }
            }
            steps {
                echo '########################################## Building #########################################'
                // trigger the build
                sh 'scm-src/build.sh ' + TEST_SYSTEM
            }
        }
        stage('prepare_test') {
            agent {
                docker {
                    reuseNode true
                    registryUrl DOCKER_TEST_ENV.registry
                    image DOCKER_TEST_ENV.image
                    args DOCKER_TEST_ENV.args
                }
            }
            steps {
                echo '################################### Prepare Test Environment ################################'
                sh 'scm-src/test.sh prepare'
            }
        }
        stage('test') {
            agent {
                docker {
                    reuseNode true
                    registryUrl DOCKER_TEST_ENV.registry
                    image DOCKER_TEST_ENV.image
                    args DOCKER_TEST_ENV.args
                }
            }
            steps {
                lock('nw_test_lock'){
                echo '########################################## Testing ##########################################'
                sh 'scm-src/test.sh run --junitxml=' + TEST_SYSTEM +'_results.xml ' + TEST_SYSTEM + '*.py'
             }
            }
        }
        stage('astyle_check') {
            // run this after the tests, so we have test results even if source formatting is still not fine.
            steps {
                echo '####################################### Astyle Check ########################################'
                sh 'scm-src/build.sh check_astyle_artifacts'
            }
        }
    }
    post {
        always {
            junit '**/' + TEST_SYSTEM + '_results.xml'
            echo '#################################### Archive Artifacts #######################################'
            sh 'tar -czf ' + BUILD_SPEC + '.tgz ' + BUILD_SPEC
            archiveArtifacts artifacts: BUILD_SPEC + '.tgz', fingerprint: true
            archiveArtifacts artifacts: 'workspace_test/ta/tests/' + TEST_SYSTEM + '_results.xml ', fingerprint: true
        }
    }
}
